import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer.withOpacity(1),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(11.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(9.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black90002.withOpacity(0.39),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray10001,
          fontSize: 16.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w300,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 15.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 12.fSize,
          fontFamily: 'Nunito Sans',
          fontWeight: FontWeight.w400,
        ),
        displayLarge: TextStyle(
          color: appTheme.gray90001,
          fontSize: 52.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        displayMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 50.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 28.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray90001,
          fontSize: 13.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 11.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray90001,
          fontSize: 21.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 17.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray90001,
          fontSize: 14.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF004CFF),
    primaryContainer: Color(0XFFF4F4F4),

    // Error colors
    errorContainer: Color(0XFFEB001B),
    onError: Color(0XFF0B54FF),
    onErrorContainer: Color(0X99FFFFFF),

    // On colors(text colors)
    onPrimary: Color(0XFF090909),
    onPrimaryContainer: Color(0XFF0C29B9),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFF3BC15);

  // Black
  Color get black900 => Color(0XFF0D0D0D);
  Color get black90001 => Color(0XFF0B0B0B);
  Color get black90002 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFC7D6FB);
  Color get blue10001 => Color(0XFFCCD9F9);
  Color get blue200 => Color(0XFF8BC6FF);
  Color get blue20001 => Color(0XFFAAC3FF);
  Color get blue50 => Color(0XFFD9E4FF);
  Color get blue5001 => Color(0XFFDFE9FF);
  Color get blue800 => Color(0XFF003BE3);
  Color get blue80001 => Color(0XFF0042E0);
  Color get blueA700 => Color(0XFF004BFE);
  Color get blueA70001 => Color(0XFF004BFF);

  // BlueGray
  Color get blueGray100 => Color(0XFFD2D2D2);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray40029 => Color(0X298D8D8D);

  // Cyan
  Color get cyan600 => Color(0XFF0CA8B9);

  // DeepOrange
  Color get deepOrange100 => Color(0XFFF2B8B8);

  // Gray
  Color get gray100 => Color(0XFFF2F5FE);
  Color get gray10001 => Color(0XFFF3F3F3);
  Color get gray10002 => Color(0XFFF1F4FE);
  Color get gray10003 => Color(0XFFF5F5F5);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray20001 => Color(0XFFEFEFEF);
  Color get gray20002 => Color(0XFFE7E8EB);
  Color get gray20003 => Color(0XFFE6E8EA);
  Color get gray20004 => Color(0XFFF1F0F0);
  Color get gray300 => Color(0XFFE8E4E4);
  Color get gray30001 => Color(0XFFDBDBDB);
  Color get gray400 => Color(0XFFC6C6C6);
  Color get gray50 => Color(0XFFF4F6FE);
  Color get gray500 => Color(0XFFB5A2A2);
  Color get gray5001 => Color(0XFFF8F8F8);
  Color get gray5002 => Color(0XFFF5F8FF);
  Color get gray5003 => Color(0XFFF8FAFF);
  Color get gray900 => Color(0XFF141414);
  Color get gray90001 => Color(0XFF202020);
  Color get gray90002 => Color(0XFF2A2A2A);
  Color get gray90003 => Color(0XFF1E1E1E);

  // GrayB
  Color get gray200B7 => Color(0XB7E8E8E8);

  // Green
  Color get greenA700 => Color(0XFF08C514);

  // Indigo
  Color get indigo100 => Color(0XFFCBD3EB);
  Color get indigo10001 => Color(0XFFBEC8E5);
  Color get indigo200 => Color(0XFF9EB4E8);
  Color get indigo50 => Color(0XFFE5EBFC);
  Color get indigo900 => Color(0XFF1A3168);

  // LightGreen
  Color get lightGreenA200 => Color(0XFF9DEB44);

  // Orange
  Color get orange700 => Color(0XFFFE7F00);

  // Pink
  Color get pink300 => Color(0XFFFF5790);
  Color get pink400 => Color(0XFFF34D75);

  // Purple
  Color get purple400 => Color(0XFF9D3CB9);

  // Red
  Color get red100 => Color(0XFFF8CECE);
  Color get red200 => Color(0XFFF1AEAE);
  Color get red300 => Color(0XFFD97474);
  Color get red400 => Color(0XFFEC4E4E);
  Color get red50 => Color(0XFFFFEBEB);
  Color get red500 => Color(0XFFF63C3C);
  Color get red50001 => Color(0XFFFF3333);
  Color get redA400 => Color(0XFFF81140);

  // Yellow
  Color get yellow700 => Color(0XFFE9BB32);
  Color get yellow800 => Color(0XFFE4A719);
  Color get yellow80001 => Color(0XFFF1B11C);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
